{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transactions.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","transaction","id","payload","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","IncomeExpenses","amounts","income","expense","className","Transactions","sign","text","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7b749a7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <h2>\r\n            Expense Tracker\r\n        </h2>\r\n    )\r\n}\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(\r\n          transaction => transaction.id !== action.payload\r\n        )\r\n      };\r\n    case \"ADD_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: [action.payload, ...state.transactions]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\n// initial state\r\nconst initialState = {\r\n  transactions: []\r\n};\r\n\r\n// create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// provider component\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  // actions\r\n  function deleteTransaction(id) {\r\n    dispatch({\r\n      type: \"DELETE_TRANSACTION\",\r\n      payload: id\r\n    });\r\n  }\r\n\r\n  function addTransaction(transaction) {\r\n    dispatch({\r\n      type: \"ADD_TRANSACTION\",\r\n      payload: transaction\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map(transaction => transaction.amount);\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0);\r\n\r\n  return (\r\n    <>\r\n      <h4>Your Balance</h4>\r\n      <h1>Rp {total}</h1>\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const IncomeExpenses = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n  const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0);\r\n  const expense =\r\n    amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"inc-exp-container\">\r\n        <div>\r\n          <h4>Income</h4>\r\n          <p id=\"money-plus\" className=\"money plus\">\r\n            +Rp {income}\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n          <p id=\"money-minus\" className=\"money minus\">\r\n            -Rp {expense}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const Transactions = ({ transaction }) => {\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n  const sign = transaction.amount < 0 ? \"-\" : \"+\";\r\n\r\n  return (\r\n    <li className={transaction.amount < 0 ? \"minus\" : \"plus\"}>\r\n      {transaction.text}{\" \"}\r\n      <span>\r\n        {\" \"}\r\n        {sign}Rp {Math.abs(transaction.amount)}{\" \"}\r\n      </span>{\" \"}\r\n      <button className=\"delete-btn\" onClick={() => deleteTransaction(transaction.id)}>X</button>\r\n    </li>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Transactions } from \"./Transactions\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const TransactionList = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map(transaction => (<Transactions key={transaction.id} transaction={transaction} />))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nexport const AddTransaction = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 100000000),\r\n      text,\r\n      amount: +amount\r\n    };\r\n\r\n    addTransaction(newTransaction)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={e => setText(e.target.value)}\r\n            placeholder=\"Enter text...\"\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <br />\r\n            (negative - expense, positive - income)\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={e => setAmount(e.target.value)}\r\n            placeholder=\"Enter amount...\"\r\n          />\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { Balance } from \"./components/Balance\";\nimport { IncomeExpenses } from \"./components/IncomeExpenses\";\nimport { TransactionList } from \"./components/TransactionList\";\nimport { AddTransaction } from \"./components/AddTransaction\";\n\nimport { GlobalProvider } from \"./context/GlobalState\"\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}